# Generated by Django 4.0.6 on 2022-08-05 10:49
import logging

from django.db import migrations


def create_authors_group(apps, schema_editor):
    """
    Creates an 'Authors' user group and assigns permissions for them to create Annotation documents.
    :param apps:
    :param schema_editor:
    :return:
    """
    Group = apps.get_model("auth", "group")
    Permission = apps.get_model("auth", "permission")

    authors_group, created = Group.objects.get_or_create(name="authors")

    if created:
        logging.info("Created authors group")

    for perm_codename in [
        "view_sample",
        "view_project",
        "add_sampleannotation",
        "view_sampleannotation",
        "change_sampleannotation",
    ]:
        try:
            perm = Permission.objects.get(codename=perm_codename)
        except Permission.DoesNotExist:
            raise Exception(
                f"No permissions exists called {perm_codename}. Did you mess with the migrations?"
            )

        authors_group.permissions.add(perm)
        logging.info(f"Genated authors group perm to {perm_codename}")


def remove_authors_group(apps, schema_editor):
    """
    Removes the 'Authors' user group.
    :param apps:
    :param schema_editor:
    :return:
    """
    Group = apps.get_model("auth", "group")
    try:
        authors_group = Group.objects.get(name="authors")
    except Group.DoesNotExist:
        logging.warning(
            "No Authors user group exists, but it should have during this reverse migration..."
        )
    else:
        authors_group.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("holofood", "0012_viralfragment_gff_alter_viralfragment_contig_id_and_more"),
    ]

    operations = [migrations.RunPython(create_authors_group, remove_authors_group)]
